<?php

namespace WBB\BarBundle\Repository;

use WBB\CoreBundle\Repository\EntityRepository;
use WBB\BarBundle\Entity\BestOf;
use Doctrine\ORM\Query\Expr;

/**
 * BestOfRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BestOfRepository extends EntityRepository
{
    public function findYouMayAlsoLike(BestOf $bestOf)
    {
        $qb = $this->createQueryBuilder('bo')
            ->where('bo.id <> ' . $bestOf->getId())
            ->orderBy('bo.onTop', 'desc');

        if ($bestOf->getCity()) {
            $qb->leftJoin('bo.city', 'city', Expr\Join::WITH, 'city.id = :id')
                ->setParameter('id', $bestOf->getCity()->getId())
                ->addOrderBy('city.id', 'desc');
        }

        if ($bestOf->getByTag()) {
            // TODO common tags
        }

        $qb->addOrderBy('bo.createdAt', 'desc');
        $qb->setMaxResults(3);

        return $qb->getQuery()->getResult();
    }

    public function findTopBestOfs($city = null, $favoris = null, $limit = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)))
            ->orderBy($this->getAlias().'.createdAt', 'DESC')
        ;

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if($limit){
            $qb->setMaxResults($limit);
        }

        // TODO: Favoris WBB

        return $qb->getQuery()->getResult();
    }

    public function findBestofOrderedByName($city = null, $offset = 0, $limit = 8)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->orderBy($this->getAlias().'.name', 'ASC')
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findLatestBestofs($city = null, $limit = 8, $offset = 0, $onTop = true)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->orderBy($this->getAlias().'.createdAt', 'DESC')
            ->where($qb->expr()->eq(1, 1))
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($onTop){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        return $qb->getQuery()->getResult();
    }
} 