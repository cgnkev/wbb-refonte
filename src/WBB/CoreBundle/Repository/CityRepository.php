<?php

namespace WBB\CoreBundle\Repository;

use WBB\CoreBundle\Repository\EntityRepository;

/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends EntityRepository
{
    public function findTopCities()
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias().', cn, ci')
            ->leftJoin($this->getAlias().'.country', 'cn')
            ->leftJoin($this->getAlias().'.image', 'ci')
            ->where($qb->expr()->eq($this->getAlias().'.onTopCity', $qb->expr()->literal(true)))
        ;

        return $qb->getQuery()->getResult();
    }

    public function findCitiesOrderedByName()
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias().', cn, ci')
            ->leftJoin($this->getAlias().'.country', 'cn')
            ->leftJoin($this->getAlias().'.image', 'ci')
            ->orderBy($this->getAlias().'.name')
        ;

        return $qb->getQuery()->getResult();
    }

    public function findBarFinderCities($geoCity = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias())
            ->orderBy($this->getAlias().'.onTopCity', 'DESC')
            ->addOrderBy($this->getAlias().'.name', 'ASC')
        ;

        if($geoCity){
            $qb->where($qb->expr()->neq($this->getAlias().'.id', $geoCity->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findCitiesWithBars($keyword = "")
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias())
            ->innerJoin($this->getAlias().".bars", "b")
            ->leftJoin($this->getAlias().".country", "c")
            ->where($qb->expr()->like($this->getAlias().'.name', "'%".$keyword."%'"))
            ->orWhere($qb->expr()->like('c.name', "'%".$keyword."%'"))
        ;

        return $qb->getQuery()->getResult();
    }

    public function findByNameAndCountry($name = "", $country = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias())
            ->leftJoin($this->getAlias().".country", "c")
            ->where($qb->expr()->like($this->getAlias().'.name', $qb->expr()->literal($name)))
        ;

        if($country){
            $qb->andWhere($qb->expr()->eq('c.id', $country->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findNearestCity($latitude = 0, $longitude = 0, $maxDistance = 0, $offset = 0, $limit = 0)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().",GEO(".$this->getAlias().".latitude = :latitude, ".$this->getAlias().".longitude = :longitude) AS HIDDEN Distance")
            ->setParameter('latitude', $latitude)
            ->setParameter('longitude', $longitude)
            ->where($qb->expr()->eq($this->getAlias().'.onTopCity', true))
            ->orderBy('Distance', 'ASC')
            ->setFirstResult($offset)
        ;

        if($maxDistance > 0){
            $qb->having($qb->expr()->lte('Distance', $maxDistance));
        }

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function findCitiesLike($name, $limit = false)
    {
        $qb = $this->createQueryBuilder($this->getAlias());
        $qb
            ->where($qb->expr()->like($this->getAlias().'.name', ':name'))
            ->setParameter('name', "$name%")
            ;

        if($limit){
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }
}
