<?php

namespace WBB\BarBundle\Repository;

use WBB\BarBundle\Entity\Bar;
use WBB\CoreBundle\Repository\EntityRepository;
use WBB\BarBundle\Entity\BestOf;

/**
 * BestOfRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BestOfRepository extends EntityRepository
{
    public function findYouMayAlsoLike(BestOf $bestof, $city = null, $limit = 3, $forceTags = true, $excluded = array())
    {
        $ids = array($bestof->getId());
        foreach ($bestof->getBestofs() as $excludedBestof) {
            if($excludedBestof)
                $ids[] = $excludedBestof->getId();
        }
        foreach ($excluded as $excludedBestof) {
            if($excludedBestof)
                $ids[] = $excludedBestof->getId();
        }

        $qb = $this->createQueryBuilder($this->getAlias());
        $qb
            ->select()
            ->distinct($this->getAlias().'.id')
            ->where($qb->expr()->notIn($this->getAlias().'.id', $ids))
            ->orderBy($this->getAlias().'.onTop', 'desc')
            ->groupBy($this->getAlias().'.id')
        ;

        if ($city && $bestof->getCity()) {
            $qb
                ->leftJoin($this->getAlias().'.city', 'c')
                ->andWhere($qb->expr()->eq('c.id', $bestof->getCity()->getId()));
        }

        if ($bestof->getByTag() && $forceTags) {
            $qb
                ->addSelect('(count(t.id) + count(tgw.id)) as HIDDEN nbTags')
                ->leftjoin($this->getAlias().'.energyLevel', 'el')
                ->leftjoin($this->getAlias().'.toGoWith', 'tgw')
                ->leftjoin($this->getAlias().'.tags', 'bt')
                ->leftjoin('bt.tag', 't')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->in('t.id', ':tags'),
                        $qb->expr()->orX(
                            $qb->expr()->in('tgw.id', ':goWith'),
                            $qb->expr()->eq('el.id', ($bestof->getEnergyLevel()) ? $bestof->getEnergyLevel()->getId() : 0)
                        )

                    )
                )
                ->setParameter('tags', $bestof->getTagsIds())
                ->setParameter('goWith', $bestof->getGoWithIds())
                ->addOrderBy('nbTags', 'DESC');
        }

        $qb
            ->addOrderBy($this->getAlias().'.createdAt','DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function findPopularBestofs($city = null, $offset = 0, $limit = 5)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().', COUNT(uf) as HIDDEN nbFavoris')
            ->leftJoin($this->getAlias().'.usersFavorite', 'uf')
            ->groupBy($this->getAlias())
            ->orderBy($this->getAlias().'.onTop', 'DESC')
            ->addOrderBy('nbFavoris', 'DESC')
            ->addOrderBy($this->getAlias().'.createdAt', 'DESC')
            ->setFirstResult($offset)
        ;

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        if ($city) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        return $qb->getQuery()->getResult();

    }

    public function findTopBestOfs($city = null, $favoris = null, $limit = null, $onlyOnTop = true)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().', c')
            ->leftJoin($this->getAlias().'.city', 'c')
            ->where($qb->expr()->eq(1, 1))
            ->groupBy($this->getAlias())
            ->orderBy($this->getAlias().'.onTop', 'DESC')
        ;

        if ($onlyOnTop) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
        }

        if ($city) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        if ($favoris) {
            $qb
                ->addSelect('COUNT(uf) as HIDDEN nbFavoris')
                ->leftJoin($this->getAlias().'.usersFavorite', 'uf')
                ->addOrderBy('nbFavoris', 'DESC');
        }

        $qb->addOrderBy($this->getAlias().'.createdAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findBestofOrderedByName($city = null, $offset = 0, $limit = 8, $order = 'ASC', $user = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->orderBy($this->getAlias().'.name', $order)
            ->setFirstResult($offset)
        ;

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        if ($city) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if ($user) {
            $qb
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->andWhere($qb->expr()->eq('uf.id', $user->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarsOrderedByCityAndName($user = null, $offset = 0, $limit = 8)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->addSelect('c, cn')
            ->leftjoin($this->getAlias().'.city', 'c')
            ->leftjoin($this->getAlias().'.country', 'cn')
            ->setFirstResult($offset)
        ;

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        if ($user) {
            $qb
//                ->addSelect('-c.name AS HIDDEN inverseNames')
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->andWhere($qb->expr()->eq('uf.id', $user->getId()))
//                ->orderBy('inverseNames', 'DESC')
                ->addOrderBy('c.name', 'ASC')
//                ->groupBy($this->getAlias())
//                ->addGroupBy('c')
            ;
        }

        return $qb->getQuery()->getResult();
    }

    public function findLatestBestofs($city = null, $limit = 8, $offset = 0, $onTop = true, $user = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->orderBy($this->getAlias().'.createdAt', 'DESC')
            ->where($qb->expr()->eq(1, 1))
            ->setFirstResult($offset)
        ;

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        if ($onTop) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
        }

        if ($city) {
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if ($user) {
            $qb
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->andWhere($qb->expr()->eq('uf.id',$user->getId()))
            ;
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarRelatedBestofs(Bar $bar, $onTop = true, $limit = 5)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().', c')
            ->leftJoin($this->getAlias().'.city', 'c')
            ->innerJoin($this->getAlias().'.bars', 'bb')
            ->innerJoin('bb.bar', 'b')
            ->orderBy($this->getAlias().'.createdAt', 'DESC')
            ->where($qb->expr()->eq('b.id', $bar->getId()))
            ->setMaxResults($limit)
        ;

        if($onTop)
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
        elseif($onTop == false)
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(false)));

        return $qb->getQuery()->getResult();
    }
}
