<?php

namespace WBB\BarBundle\Repository;

use WBB\BarBundle\Entity\BestOf;
use WBB\CoreBundle\Repository\EntityRepository;
use WBB\BarBundle\Entity\Bar;

/**
 * BarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BarRepository extends EntityRepository
{
    const BAR_LOCATION_CITY = 1;
    const BAR_LOCATION_COUNTRY = 2;
    const BAR_LOCATION_WORLDWIDE = 3;

    /* Find Bars By City and Suburb Id */
    public function findAllEnabled($city = null, $suburb = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)));

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if($suburb){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.suburb', $suburb->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    /* Find Bars By City and Suburb Slugs */
    public function findByAllEnabledSlug($citySlug = null, $suburbSlug = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)));

        if($citySlug){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city.slug', $qb->expr()->literal($citySlug)));
        }

        if($suburbSlug){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.suburb.slug', $qb->expr()->literal($suburbSlug)));
        }

        return $qb->getQuery()->getResult();
    }


    public function findBestBars($city = null, $limit = 6)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().", COUNT(tp) AS HIDDEN nbTips")
            ->leftjoin($this->getAlias().'.tips', 'tp', 'WITH', 'tp.status ='. $qb->expr()->literal(1))
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->groupBy($this->getAlias())
            ->orderBy($this->getAlias().'.onTop', 'DESC')
            ->addOrderBy('nbTips', 'DESC')
            ->setMaxResults($limit)
        ;

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        //TODO : Add Favoris count

        return $qb->getQuery()->getResult();

    }

    public function findPopularBars($city = null, $limit = 5, $offset = 0)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->orderBy($this->getAlias().'.onTop', 'DESC')
            ->addOrderBy($this->getAlias().'.createdAt', 'DESC')
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        //TODO : Add Favoris count

        return $qb->getQuery()->getResult();

    }

    public function findLatestBars($city = null, $limit = 5, $offset = 0, $onTop = true, $user = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->orderBy($this->getAlias().'.createdAt', 'DESC')
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($onTop){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if($user){
            $qb
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->andWhere($qb->expr()->eq('uf.id',$user->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findYouMayAlsoLike($bar, $location, $exceptBars = null, $onTop = true, $tags = true, $limit = 4)
    {
        if($bar)
        {
            $ids = array($bar->getId());
            if($exceptBars != null)
            {
                foreach($exceptBars as $exBar)
                {
                    if($exBar)
                        $ids[] = $exBar->getId();
                }
            }

            $qb = $this->createQuerybuilder($this->getAlias());

            $qb
                ->select($this->getAlias())
                ->innerjoin($this->getAlias().'.city', 'c')
                ->where($qb->expr()->notIn($this->getAlias().'.id', ':exceptBars'))
                ->andWhere($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
                ->setParameter('exceptBars', $ids)
            ;

            if($onTop == true){
                $qb
                    ->andWhere($qb->expr()->eq($this->getAlias().'.onTop', $qb->expr()->literal(true)));
            }

            if($tags == true){
                $qb
                    ->addSelect('count(t.id) as HIDDEN nbTags')
                    ->addSelect('count(tgw.id) as HIDDEN nbWiths')
                    ->leftjoin($this->getAlias().'.energyLevel', 'el')
                    ->leftjoin($this->getAlias().'.toGoWith', 'tgw')
                    ->leftjoin($this->getAlias().'.tags', 'bt')
                    ->leftjoin('bt.tag', 't')
                    ->andWhere(
                        $qb->expr()->orX(
                            $qb->expr()->in('t.id', ':tags'),
                            $qb->expr()->orX(
                                $qb->expr()->in('tgw.id', ':goWith'),
                                $qb->expr()->eq('el.id', ($bar->getEnergyLevel()) ? $bar->getEnergyLevel()->getId() : 0)
                            )

                        )
                    )
                    ->setParameter('tags', $bar->getTagsIds())
                    ->setParameter('goWith', $bar->getGoWithIds())
                    ->orderBy('nbTags', 'DESC')
                    ->addOrderBy('nbWiths', 'DESC')
                ;
            }

            if($location == BarRepository::BAR_LOCATION_CITY && !is_null($bar->getCity()))
            {
                $qb
                    ->andWhere($qb->expr()->eq($this->getAlias().'.city', ':city'))
                    ->setParameter('city', $bar->getCity());
            }

            if($location == BarRepository::BAR_LOCATION_COUNTRY && !is_null($bar->getCity()) && !is_null($bar->getCity()->getCountry()))
            {
                $qb
                    ->andWhere($qb->expr()->eq('c.country', ':country'))
                    ->setParameter('country', $bar->getCity()->getCountry());
            }

            $qb
                ->groupBy($this->getAlias())
                ->setMaxResults($limit);

            return $qb->getQuery()->getResult();
        }
        else{
            return null;
        }
    }

    public function findNearestBars($city = null, $latitude = 0, $longitude = 0, $offset = 0, $limit = 8)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias().", GEO(".$this->getAlias().".latitude = :latitude, ".$this->getAlias().".longitude = :longitude) AS HIDDEN Distance")
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->setParameter('latitude', $latitude)
            ->setParameter('longitude', $longitude)
            ->orderBy('Distance', 'ASC')
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarsOrderedByName($city = null, $offset = 0, $limit = 8, $user = null, $orderBy = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->orderBy($this->getAlias().'.name', 'ASC')
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if($user){
            $qb
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->andWhere($qb->expr()->eq('uf.id',$user->getId()));
        }

        if($orderBy){
            foreach($orderBy as $field => $order){
                $qb
                    ->addOrderBy($field, $order)
                ;
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarsOrderedByCityAndName($user = null, $offset = 0, $limit = 8)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->setFirstResult($offset)
        ;

        if($limit > 0){
            $qb->setMaxResults($limit);
        }

        if($user){
            $qb
                ->innerJoin($this->getAlias().'.usersFavorite', 'uf')
                ->leftJoin($this->getAlias().'.city', 'c')
                ->andWhere($qb->expr()->eq('uf.id',$user->getId()))
                ->orderBy('c.name', 'ASC')
                ->addOrderBy($this->getAlias().'.name', 'ASC')
            ;
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarsByExactTags(BestOf $bestof, $offset = 0, $limit = 9)
    {
        $qb = $this->createQuerybuilder($this->getAlias());
        $qb
            ->select($this->getAlias())
            ->addSelect('count(t.id) as HIDDEN nbTags')
            ->addSelect('count(tgw.id) as HIDDEN nbWiths')
            ->andWhere($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))

            ->innerjoin($this->getAlias().'.tags', 'bt')
            ->innerjoin('bt.tag', 't')
            ->andWhere($qb->expr()->in('t.id', ':tags'))
            ->setParameter('tags', $bestof->getTagsIds());

        if($bestof->getEnergyLevel()){
            $qb
                ->innerjoin($this->getAlias().'.energyLevel', 'el')
                ->andWhere($qb->expr()->eq('el.id', $bestof->getEnergyLevel()->getId()));
        }

        $qb
            ->innerjoin($this->getAlias().'.toGoWith', 'tgw')
            ->andWhere($qb->expr()->in('tgw.id', ':goWith'))
            ->setParameter('goWith', $bestof->getGoWithIds())

            ->groupBy($this->getAlias().'.id')
            ->having($qb->expr()->gte('nbTags', count($bestof->getTagsIds())))
            ->andHaving($qb->expr()->gte('nbWiths', count($bestof->getGoWithIds())))
        ;

        if($bestof->getCity()){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $bestof->getCity()->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function findBarFromFinder($city = null, $tag = null, $mood = null)
    {
        $qb = $this->createQuerybuilder($this->getAlias());

        $qb
            ->select($this->getAlias())
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
            ->orderBy($this->getAlias().'.name', 'ASC')
        ;

        if($city){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.city', $city->getId()));
        }

        if($tag){
            $qb
                ->innerjoin($this->getAlias().'.toGoWith', 'tgw')
                ->andWhere($qb->expr()->in('tgw.id', $tag))
            ;
        }

        if($mood){
            $qb->andWhere($qb->expr()->eq($this->getAlias().'.energyLevel', $mood->getId()));
        }

        return $qb->getQuery()->getResult();
    }

    public function getExportQuery()
    {
        $qb = $this->createQueryBuilder($this->getAlias());
        $qb
            ->where($qb->expr()->eq($this->getAlias().'.status', $qb->expr()->literal(Bar::BAR_STATUS_ENABLED_VALUE)))
        ;

        return $qb->getQuery();
    }
}
